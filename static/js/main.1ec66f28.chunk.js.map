{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.tsx","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","console","log","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","disabled","value","onClick","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","correct","prev","answerObject","correctAnswer","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.1ec66f28.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n    EASY = \"easy\",\r\n    MEDIUM = \"medium\",\r\n    HARD = \"hard\",\r\n}\r\n\r\n//first await fetch itself and then await when it's converted to json\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    console.log(data);\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([\r\n                ...question.incorrect_answers, \r\n                question.correct_answer])\r\n        }\r\n    ))\r\n}","export const shuffleArray = (array: any[]) =>\r\n    [...array].sort(() => Math.random() - 0.5 )","import React from 'react';\r\n\r\ntype Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: any;\r\n    userAnswer: any;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n    question, answers, callback, \r\n    userAnswer, questionNr, \r\n    totalQuestions\r\n\r\n}) => (\r\n        <div>\r\n            <p className=\"number\">\r\n                Question: {questionNr} / {totalQuestions}\r\n            </p>\r\n            <p dangerouslySetInnerHTML={{ __html: question }} />\r\n            <div>\r\n                {answers.map(answer => (\r\n                    <div key={answer}>\r\n                        <button disabled={userAnswer}\r\n                                value={answer}\r\n                                onClick={callback}        \r\n                        >\r\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                        </button>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\nexport default QuestionCard;\r\n\r\nexport{}","import * as React from 'react';\nimport { fetchQuizQuestions, QuestionState } from './API';\n//Components\nimport QuestionCard from './components/QuestionCard';\nimport { useState } from 'react';\n//Types\nimport { Difficulty} from './API';\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  //Declare multiple state variables\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  \n  //console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      //Users answer \n      //value={answer} passed to button of QuestionCard\n      const answer = e.currentTarget.value;\n      //Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      //Add score if answer is correct\n      if (correct) setScore(prev => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, answerObject])\n    }\n  }\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQuestion = number +1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n\n  }\n\n  return (\n    <div className='App'>\n      <h1>REACT QUIZ</h1>\n\n      {/*This will appear only when it's game over */}\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n        Start\n        </button>\n      ) : null }\n      \n      {/* Show this if it is not game over*/}\n      {!gameOver ? <p className=\"score\"> Score: {score}</p> : null }\n\n      {/* Show only when it is loading */}\n      {loading && <p>Loading Questions ...</p>}\n\n      {/*Show when it is neither loading nor gameOver */}\n      {!loading && !gameOver && (\n      <QuestionCard \n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n      />\n      )}\n\n      {/* Show when it's not gameover nor loading \n      and show next question when user gives an answer. */}\n      {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ?(\n          <button className=\"next\" onClick={nextQuestion}>Next</button>\n      ) : null}\n\n      \n    </div>\n  );\n}\n\nexport default App;","\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);"],"sourceRoot":""}